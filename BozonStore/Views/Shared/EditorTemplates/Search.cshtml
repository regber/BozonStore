@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    var propLimitValues = (Newtonsoft.Json.Linq.JObject)ViewData["PropLimitValues"];
}
@functions
{
    public string GetActiveRangeInitalStyle(string minValue, string maxValue, string maxLimit)
    {

        var left=(1-((float.Parse(maxLimit)-float.Parse(minValue))/float.Parse(maxLimit)))*100;
        var right=(1-((float.Parse(maxLimit)-(float.Parse(maxLimit)-float.Parse(maxValue)))/float.Parse(maxLimit)))*100;
        
        var width=100-left-right;

        if(width<0)
        {
            width=0;
        }

        var activeRangeLineStyle="left:"+left.ToString().Replace(',','.')+"%; width:"+width.ToString().Replace(',','.')+"%";

        return activeRangeLineStyle;
    }
}
<div>
        @foreach (var prop in ViewData.ModelMetadata.Properties)
        {
            @if (prop.ModelType == typeof(string) && prop.PropertyName!="Discription")
            {
                var propName = prop.PropertyName;
                var propDisplay = prop.DisplayName;

                <div>
                    <label>@propDisplay</label>
                </div>
                <div>
                    <input name=@propName value="@Context.Request.Query[propName]" />
                </div>
                
            }
            @if (prop.ModelType == typeof(int) && prop.ShowForEdit)
            {
                var propName = prop.PropertyName;
                var propNameMin = string.Concat(propName, "[0]");
                var propNameMax = string.Concat(propName, "[1]");
                var propDisplay = prop.DisplayName;

                var min = propLimitValues.Value<string>(propName + "Min");
                var max = propLimitValues.Value<string>(propName + "Max");
                var minValue = Context.Request.Query[propNameMin].ToString() == string.Empty ? (min) : Context.Request.Query[propNameMin].ToString();
                var maxValue = Context.Request.Query[propNameMax].ToString() == string.Empty ? (max) : Context.Request.Query[propNameMax].ToString();

                <div>
                    <label>@propDisplay</label>
                    <div class="ranges-limit-values">
                        <p>@min</p>
                        <p>@max</p>
                    </div>
                    <div class="ranges">
                        <div class="ranges-line"></div>
                        <div class="ranges-line active" style="@GetActiveRangeInitalStyle(@minValue,@maxValue,@max)"></div>@*добавить максимальное и минимальное значение над полосой, также решить каким образом загружать исходные значения ползунков, а после поиска использовать значения из query*@
                        <input step="1" type="range" valueInput="@propNameMin" oninput="setMinInputValue('@propNameMin','@propNameMax',this.value)" value="@minValue" min="@min" max="@max" />
                        <input step="1" type="range" valueInput="@propNameMax" oninput="setMaxInputValue('@propNameMax','@propNameMin',this.value)" value="@maxValue" min="@min" max="@max" />
                    </div>
                    <div class="fields">
                        <p>от</p>
                        <input type="number" min="@min" max="@max" name=@propNameMin valueInput="@propNameMin" oninput="setMinInputValue('@propNameMin','@propNameMax',this.value)" value="@minValue" />
                        <p>до</p>
                        <input type="number" min="@min" max="@max" name=@propNameMax valueInput="@propNameMax" oninput="setMaxInputValue('@propNameMax','@propNameMin',this.value)" value="@maxValue" />
                    </div>
                </div>
            }
        }
</div>
<script>
    function setMaxInputValue(maxInput, minInput,value) {

        let maxInputs = document.querySelectorAll("[valueInput='" + maxInput+"']");
        let minInputs = document.querySelectorAll("[valueInput='" + minInput+"']");

        let minValue=parseInt(minInputs.item(0).value);
        let maxValue=parseInt(value);

        setActiveRangeLineStyle(minValue,maxValue,minInputs,minInputs);

        maxInputs.forEach(function (input, index) {
            input.value=maxValue;
        });

        if(minValue>=maxValue)
        {
            minInputs.forEach(function (input, index) {
                input.value=maxValue;
            });
        }
    }
    function setMinInputValue(minInput, maxInput, value) {

        let maxInputs = document.querySelectorAll("[valueInput='" + maxInput+"']");
        let minInputs = document.querySelectorAll("[valueInput='" + minInput+"']");
        

        let maxValue=parseInt(maxInputs.item(0).value);
        let minValue=parseInt(value);

        setActiveRangeLineStyle(minValue,maxValue,minInputs,minInputs);

        minInputs.forEach(function (input, index) {
            input.value=minValue;
        });

        if(minValue>=maxValue)
        {
            
            maxInputs.forEach(function (input, index) {
                input.value=minValue;
            });
        }
    }

    function setActiveRangeLineStyle(minValue,maxValue,minInputs,maxInputs)
    {   
        //устанавливать значение стиля ппри превышении лимитовв максимально возможную
        var minLimit=minInputs[0].min;
        var maxLimit=maxInputs[0].max;

        if(minValue<minLimit)
        {
            minValue=minLimit;
        }
        if(maxValue>maxLimit)
        {
            maxValue=maxLimit;
        }

        if(isNaN(minValue))
        {
            minValue=maxLimit/2;
        }
        if(isNaN(maxValue))
        {
            maxValue=maxLimit/2;
        }


        let rangeLine= minInputs.item(0).parentElement.querySelector(".ranges-line.active");

        var activeRangeLineStyle=getActiveRangeLineStyle(minValue,maxValue,maxLimit);

        rangeLine.setAttribute("style",activeRangeLineStyle);
    }




    function getActiveRangeLineStyle(minValue, maxValue,maxLimit)
    {
        var left=(1-((maxLimit-minValue)/maxLimit))*100;
        var right=(1-((maxLimit-(maxLimit-maxValue))/maxLimit))*100;
        
        var width=100-left-right;

        if(width<0)
        {
            width=0;
        }

        var activeRangeLineStyle="left:"+left+"%; width:"+width+"%";

        return activeRangeLineStyle
    }

</script>

